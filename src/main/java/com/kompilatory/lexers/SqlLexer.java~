/* The following code was generated by JFlex 1.4.3 on 20.06.15 19:04 */

	package com.kompilatory.lexers;
	import java.util.*;
	import java_cup.runtime.Symbol;
	import java_cup.runtime.*;
	import com.kompilatory.parser.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20.06.15 19:04 from the specification file
 * <tt>C:/Users/Marek/workspace/sqlToEntity/src/main/java/com/kompilatory/lexers/lexer.flex</tt>
 */
public class SqlLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\1\1\2\1\3\1\0\1\2\1\4\16\1\4\0\1\2\3\0"+
    "\1\10\3\0\1\46\1\47\1\6\1\0\1\51\1\7\1\0\1\5"+
    "\12\1\1\0\1\50\5\0\1\40\3\10\1\35\1\10\1\36\1\10"+
    "\1\32\2\10\1\41\1\10\1\33\3\10\1\37\1\10\1\34\6\10"+
    "\4\0\1\10\1\0\1\14\1\16\1\11\1\44\1\13\1\21\1\45"+
    "\1\43\1\20\1\10\1\31\1\17\1\27\1\22\1\23\1\26\1\10"+
    "\1\12\1\25\1\15\1\10\1\42\1\10\1\24\1\30\1\10\4\0"+
    "\41\1\2\0\4\10\4\0\1\10\2\0\1\1\7\0\1\10\4\0"+
    "\1\10\5\0\27\10\1\0\37\10\1\0\u01ca\10\4\0\14\10\16\0"+
    "\5\10\7\0\1\10\1\0\1\10\21\0\160\1\5\10\1\0\2\10"+
    "\2\0\4\10\10\0\1\10\1\0\3\10\1\0\1\10\1\0\24\10"+
    "\1\0\123\10\1\0\213\10\1\0\5\1\2\0\236\10\11\0\46\10"+
    "\2\0\1\10\7\0\47\10\11\0\55\1\1\0\1\1\1\0\2\1"+
    "\1\0\2\1\1\0\1\1\10\0\33\10\5\0\3\10\15\0\4\1"+
    "\7\0\1\10\4\0\13\1\5\0\53\10\37\1\4\0\2\10\1\1"+
    "\143\10\1\0\1\10\10\1\1\0\6\1\2\10\2\1\1\0\4\1"+
    "\2\10\12\1\3\10\2\0\1\10\17\0\1\1\1\10\1\1\36\10"+
    "\33\1\2\0\131\10\13\1\1\10\16\0\12\1\41\10\11\1\2\10"+
    "\4\0\1\10\5\0\26\10\4\1\1\10\11\1\1\10\3\1\1\10"+
    "\5\1\22\0\31\10\3\1\244\0\4\1\66\10\3\1\1\10\22\1"+
    "\1\10\7\1\12\10\2\1\2\0\12\1\1\0\7\10\1\0\7\10"+
    "\1\0\3\1\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10"+
    "\1\0\1\10\3\0\4\10\2\0\1\1\1\10\7\1\2\0\2\1"+
    "\2\0\3\1\1\10\10\0\1\1\4\0\2\10\1\0\3\10\2\1"+
    "\2\0\12\1\4\10\7\0\1\10\5\0\3\1\1\0\6\10\4\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\2\10\1\0"+
    "\2\10\2\0\1\1\1\0\5\1\4\0\2\1\2\0\3\1\3\0"+
    "\1\1\7\0\4\10\1\0\1\10\7\0\14\1\3\10\1\1\13\0"+
    "\3\1\1\0\11\10\1\0\3\10\1\0\26\10\1\0\7\10\1\0"+
    "\2\10\1\0\5\10\2\0\1\1\1\10\10\1\1\0\3\1\1\0"+
    "\3\1\2\0\1\10\17\0\2\10\2\1\2\0\12\1\1\0\1\10"+
    "\17\0\3\1\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10"+
    "\1\0\2\10\1\0\5\10\2\0\1\1\1\10\7\1\2\0\2\1"+
    "\2\0\3\1\10\0\2\1\4\0\2\10\1\0\3\10\2\1\2\0"+
    "\12\1\1\0\1\10\20\0\1\1\1\10\1\0\6\10\3\0\3\10"+
    "\1\0\4\10\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10"+
    "\3\0\3\10\3\0\14\10\4\0\5\1\3\0\3\1\1\0\4\1"+
    "\2\0\1\10\6\0\1\1\16\0\12\1\11\0\1\10\7\0\3\1"+
    "\1\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10"+
    "\3\0\1\10\7\1\1\0\3\1\1\0\4\1\7\0\2\1\1\0"+
    "\2\10\6\0\2\10\2\1\2\0\12\1\22\0\2\1\1\0\10\10"+
    "\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10\2\0\1\1"+
    "\1\10\7\1\1\0\3\1\1\0\4\1\7\0\2\1\7\0\1\10"+
    "\1\0\2\10\2\1\2\0\12\1\1\0\2\10\17\0\2\1\1\0"+
    "\10\10\1\0\3\10\1\0\51\10\2\0\1\10\7\1\1\0\3\1"+
    "\1\0\4\1\1\10\10\0\1\1\10\0\2\10\2\1\2\0\12\1"+
    "\12\0\6\10\2\0\2\1\1\0\22\10\3\0\30\10\1\0\11\10"+
    "\1\0\1\10\2\0\7\10\3\0\1\1\4\0\6\1\1\0\1\1"+
    "\1\0\10\1\22\0\2\1\15\0\60\10\1\1\2\10\7\1\4\0"+
    "\10\10\10\1\1\0\12\1\47\0\2\10\1\0\1\10\2\0\2\10"+
    "\1\0\1\10\2\0\1\10\6\0\4\10\1\0\7\10\1\0\3\10"+
    "\1\0\1\10\1\0\1\10\2\0\2\10\1\0\4\10\1\1\2\10"+
    "\6\1\1\0\2\1\1\10\2\0\5\10\1\0\1\10\1\0\6\1"+
    "\2\0\12\1\2\0\2\10\42\0\1\10\27\0\2\1\6\0\12\1"+
    "\13\0\1\1\1\0\1\1\1\0\1\1\4\0\2\1\10\10\1\0"+
    "\44\10\4\0\24\1\1\0\2\1\5\10\13\1\1\0\44\1\11\0"+
    "\1\1\71\0\53\10\24\1\1\10\12\1\6\0\6\10\4\1\4\10"+
    "\3\1\1\10\3\1\2\10\7\1\3\10\4\1\15\10\14\1\1\10"+
    "\17\1\2\0\46\10\12\0\53\10\1\0\1\10\3\0\u0149\10\1\0"+
    "\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\51\10\1\0"+
    "\4\10\2\0\41\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0"+
    "\4\10\2\0\17\10\1\0\71\10\1\0\4\10\2\0\103\10\2\0"+
    "\3\1\40\0\20\10\20\0\125\10\14\0\u026c\10\2\0\21\10\1\0"+
    "\32\10\5\0\113\10\3\0\3\10\17\0\15\10\1\0\4\10\3\1"+
    "\13\0\22\10\3\1\13\0\22\10\2\1\14\0\15\10\1\0\3\10"+
    "\1\0\2\1\14\0\64\10\40\1\3\0\1\10\3\0\2\10\1\1"+
    "\2\0\12\1\41\0\3\1\2\0\12\1\6\0\130\10\10\0\51\10"+
    "\1\1\1\10\5\0\106\10\12\0\35\10\3\0\14\1\4\0\14\1"+
    "\12\0\12\1\36\10\2\0\5\10\13\0\54\10\4\0\21\1\7\10"+
    "\2\1\6\0\12\1\46\0\27\10\5\1\4\0\65\10\12\1\1\0"+
    "\35\1\2\0\13\1\6\0\12\1\15\0\1\10\130\0\5\1\57\10"+
    "\21\1\7\10\4\0\12\1\21\0\11\1\14\0\3\1\36\10\12\1"+
    "\3\0\2\10\12\1\6\0\46\10\16\1\14\0\44\10\24\1\10\0"+
    "\12\1\3\0\3\10\12\1\44\10\122\0\3\1\1\0\25\1\4\10"+
    "\1\1\4\10\1\1\15\0\300\10\47\1\25\0\4\1\u0116\10\2\0"+
    "\6\10\2\0\46\10\2\0\6\10\2\0\10\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\37\10\2\0\65\10\1\0\7\10\1\0"+
    "\1\10\3\0\3\10\1\0\7\10\3\0\4\10\2\0\6\10\4\0"+
    "\15\10\5\0\3\10\1\0\7\10\16\0\5\1\32\0\5\1\20\0"+
    "\2\10\23\0\1\10\13\0\5\1\5\0\6\1\1\0\1\10\15\0"+
    "\1\10\20\0\15\10\3\0\32\10\26\0\15\1\4\0\1\1\3\0"+
    "\14\1\21\0\1\10\4\0\1\10\2\0\12\10\1\0\1\10\3\0"+
    "\5\10\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10\1\0"+
    "\13\10\2\0\4\10\5\0\5\10\4\0\1\10\21\0\51\10\u0a77\0"+
    "\57\10\1\0\57\10\1\0\205\10\6\0\4\10\3\1\16\0\46\10"+
    "\12\0\66\10\11\0\1\10\17\0\1\1\27\10\11\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\40\1\57\0\1\10\u01d5\0\3\10\31\0"+
    "\11\10\6\1\1\0\5\10\2\0\5\10\4\0\126\10\2\0\2\1"+
    "\2\0\3\10\1\0\132\10\1\0\4\10\5\0\51\10\3\0\136\10"+
    "\21\0\33\10\65\0\20\10\u0200\0\u19b6\10\112\0\u51cc\10\64\0\u048d\10"+
    "\103\0\56\10\2\0\u010d\10\3\0\20\10\12\1\2\10\24\0\57\10"+
    "\1\1\14\0\2\1\1\0\31\10\10\0\120\10\2\1\45\0\11\10"+
    "\2\0\147\10\2\0\4\10\1\0\2\10\16\0\12\10\120\0\10\10"+
    "\1\1\3\10\1\1\4\10\1\1\27\10\5\1\20\0\1\10\7\0"+
    "\64\10\14\0\2\1\62\10\21\1\13\0\12\1\6\0\22\1\6\10"+
    "\3\0\1\10\4\0\12\1\34\10\10\1\2\0\27\10\15\1\14\0"+
    "\35\10\3\0\4\1\57\10\16\1\16\0\1\10\12\1\46\0\51\10"+
    "\16\1\11\0\3\10\1\1\10\10\2\1\2\0\12\1\6\0\27\10"+
    "\3\0\1\10\1\1\4\0\60\10\1\1\1\10\3\1\2\10\2\1"+
    "\5\10\2\1\1\10\1\1\1\10\30\0\3\10\43\0\6\10\2\0"+
    "\6\10\2\0\6\10\11\0\7\10\1\0\7\10\221\0\43\10\10\1"+
    "\1\0\2\1\2\0\12\1\6\0\u2ba4\10\14\0\27\10\4\0\61\10"+
    "\u2104\0\u012e\10\2\0\76\10\2\0\152\10\46\0\7\10\14\0\5\10"+
    "\5\0\1\10\1\1\12\10\1\0\15\10\1\0\5\10\1\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0\100\10"+
    "\2\0\66\10\50\0\15\10\3\0\20\1\20\0\7\1\14\0\2\10"+
    "\30\0\3\10\31\0\1\10\6\0\5\10\1\0\207\10\2\0\1\1"+
    "\4\0\1\10\13\0\12\1\7\0\32\10\4\0\1\10\1\0\32\10"+
    "\13\0\131\10\3\0\6\10\2\0\6\10\2\0\6\10\2\0\3\10"+
    "\3\0\2\10\3\0\2\10\22\0\3\1\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\2\1\16\4\1\5\1\6"+
    "\1\7\1\10\1\0\1\11\6\4\1\12\11\4\2\0"+
    "\2\11\10\4\1\13\2\4\1\14\4\4\1\0\1\11"+
    "\1\4\1\15\2\4\1\16\6\4\1\17\1\4\1\20"+
    "\3\4\1\21\6\4\1\22\1\4\1\23\2\4\1\24"+
    "\5\4\1\25\1\26\1\27\1\30\3\4\1\31\1\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\52\0\52\0\124\0\176\0\250\0\322"+
    "\0\374\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222"+
    "\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\52\0\52\0\52"+
    "\0\52\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6\0\u03f0\0\u041a"+
    "\0\u0444\0\322\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u0540"+
    "\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612\0\52\0\u063c\0\u0666"+
    "\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738\0\u0762\0\u078c\0\322"+
    "\0\u07b6\0\u07e0\0\322\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2"+
    "\0\u05e8\0\u08dc\0\322\0\u0906\0\u0930\0\322\0\u095a\0\u0984"+
    "\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\322\0\u0a56\0\322\0\u0a80"+
    "\0\u0aaa\0\u0ad4\0\322\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6"+
    "\0\u0bd0\0\322\0\u0bfa\0\322\0\u0c24\0\u0c4e\0\322\0\u0c78"+
    "\0\u0ca2\0\u0ccc\0\u0cf6\0\u0d20\0\322\0\322\0\322\0\322"+
    "\0\u0d4a\0\u0d74\0\u0d9e\0\322\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\10\1\14\2\10\1\15\1\10"+
    "\1\16\2\10\1\17\1\20\2\10\1\21\1\22\4\10"+
    "\1\23\2\10\1\24\1\10\1\25\1\10\1\26\1\27"+
    "\1\30\1\31\55\0\1\4\54\0\1\32\52\0\1\33"+
    "\43\0\1\10\6\0\36\10\5\0\1\10\6\0\2\10"+
    "\1\34\33\10\5\0\1\10\6\0\3\10\1\35\32\10"+
    "\5\0\1\10\6\0\14\10\1\36\21\10\5\0\1\10"+
    "\6\0\3\10\1\37\1\40\3\10\1\41\25\10\5\0"+
    "\1\10\6\0\11\10\1\42\1\43\23\10\5\0\1\10"+
    "\6\0\13\10\1\44\22\10\5\0\1\10\6\0\3\10"+
    "\1\45\32\10\5\0\1\10\6\0\2\10\1\46\33\10"+
    "\5\0\1\10\6\0\3\10\1\47\32\10\5\0\1\10"+
    "\6\0\23\10\1\50\12\10\5\0\1\10\6\0\25\10"+
    "\1\51\10\10\5\0\1\10\6\0\4\10\1\52\31\10"+
    "\5\0\1\10\6\0\4\10\1\53\31\10\4\0\6\54"+
    "\1\55\43\54\3\33\1\56\1\57\45\33\1\0\1\10"+
    "\6\0\3\10\1\60\32\10\5\0\1\10\6\0\4\10"+
    "\1\61\4\10\1\62\24\10\5\0\1\10\6\0\10\10"+
    "\1\63\25\10\5\0\1\10\6\0\14\10\1\64\21\10"+
    "\5\0\1\10\6\0\6\10\1\65\27\10\5\0\1\10"+
    "\6\0\17\10\1\66\16\10\5\0\1\10\6\0\5\10"+
    "\1\67\30\10\5\0\1\10\6\0\5\10\1\70\30\10"+
    "\5\0\1\10\6\0\2\10\1\71\33\10\5\0\1\10"+
    "\6\0\10\10\1\72\25\10\5\0\1\10\6\0\20\10"+
    "\1\73\15\10\5\0\1\10\6\0\24\10\1\74\11\10"+
    "\5\0\1\10\6\0\30\10\1\75\5\10\5\0\1\10"+
    "\6\0\2\10\1\76\33\10\5\0\1\10\6\0\5\10"+
    "\1\77\30\10\4\0\6\54\1\100\50\54\1\101\1\100"+
    "\43\54\3\0\1\56\47\0\1\10\6\0\4\10\1\102"+
    "\31\10\5\0\1\10\6\0\7\10\1\103\26\10\5\0"+
    "\1\10\6\0\3\10\1\104\32\10\5\0\1\10\6\0"+
    "\15\10\1\105\20\10\5\0\1\10\6\0\5\10\1\106"+
    "\30\10\5\0\1\10\6\0\7\10\1\107\26\10\5\0"+
    "\1\10\6\0\3\10\1\110\32\10\5\0\1\10\6\0"+
    "\3\10\1\111\32\10\5\0\1\10\6\0\10\10\1\112"+
    "\25\10\5\0\1\10\6\0\17\10\1\113\16\10\5\0"+
    "\1\10\6\0\25\10\1\114\10\10\5\0\1\10\6\0"+
    "\31\10\1\115\4\10\5\0\1\10\6\0\1\10\1\116"+
    "\34\10\5\0\1\10\6\0\3\10\1\117\32\10\4\0"+
    "\5\54\1\56\1\100\43\54\1\0\1\10\6\0\5\10"+
    "\1\120\30\10\5\0\1\10\6\0\2\10\1\121\33\10"+
    "\5\0\1\10\6\0\5\10\1\122\30\10\5\0\1\10"+
    "\6\0\3\10\1\123\32\10\5\0\1\10\6\0\15\10"+
    "\1\124\20\10\5\0\1\10\6\0\35\10\1\125\5\0"+
    "\1\10\6\0\4\10\1\126\31\10\5\0\1\10\6\0"+
    "\4\10\1\127\31\10\5\0\1\10\6\0\26\10\1\130"+
    "\7\10\5\0\1\10\6\0\33\10\1\131\2\10\5\0"+
    "\1\10\6\0\3\10\1\132\32\10\5\0\1\10\6\0"+
    "\3\10\1\133\32\10\5\0\1\10\6\0\15\10\1\134"+
    "\20\10\5\0\1\10\6\0\5\10\1\135\30\10\5\0"+
    "\1\10\6\0\3\10\1\136\32\10\5\0\1\10\6\0"+
    "\7\10\1\137\26\10\5\0\1\10\6\0\2\10\1\140"+
    "\33\10\5\0\1\10\6\0\25\10\1\141\10\10\5\0"+
    "\1\10\6\0\4\10\1\142\31\10\5\0\1\10\6\0"+
    "\12\10\1\143\23\10\5\0\1\10\6\0\4\10\1\144"+
    "\31\10\5\0\1\10\6\0\2\10\1\145\33\10\5\0"+
    "\1\10\6\0\20\10\1\146\15\10\5\0\1\10\6\0"+
    "\27\10\1\147\6\10\5\0\1\10\6\0\2\10\1\150"+
    "\33\10\5\0\1\10\6\0\1\10\1\151\34\10\5\0"+
    "\1\10\6\0\17\10\1\152\16\10\5\0\1\10\6\0"+
    "\3\10\1\153\32\10\5\0\1\10\6\0\16\10\1\154"+
    "\17\10\5\0\1\10\6\0\15\10\1\155\20\10\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3528];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\21\1\4\11\1\0\21\1\2\0\1\11"+
    "\21\1\1\0\55\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
/*
	Ten kod zostanie wstawiony do wygenerowanej klasy skanera.
*/

	private static final boolean printToken = true;
	/**
	*	Metoda tworzy nowy Symbol (token) wraz z okresleniem jego pozycji, bez wartosci.
	**/
	private Symbol symbol(int type){
		if(printToken) System.out.println("TOKEN: " + type);
		return new Symbol(type, yyline, yycolumn);
	}

	/**
	*	Metoda tworzy nowy Symbol (token) wraz z okresleniem jego pozycji i wartosci.
	**/
	private Symbol symbol(int type, Object value){
		if(printToken) System.out.println("TOKEN: " + type);
		//System.out.println("  " + value);
		return new Symbol(type, yyline, yycolumn, value);
	}
	
	/**
	*	Metoda obslugujaca bledy
	**/
	private void error(String message) {
    	System.out.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SqlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { return symbol(sym.CREATE);
          }
        case 27: break;
        case 14: 
          { return symbol(sym.TEXT);
          }
        case 28: break;
        case 23: 
          { return symbol(sym.INTEGER);
          }
        case 29: break;
        case 6: 
          { return symbol(sym.RBRACKET);
          }
        case 30: break;
        case 4: 
          { return symbol(sym.ID, new String(yytext()));
          }
        case 31: break;
        case 11: 
          { return symbol(sym.NOT);
          }
        case 32: break;
        case 25: 
          { return symbol(sym.TIMESTAMP);
          }
        case 33: break;
        case 3: 
          { /* return symbol(sym.NEW_LINE); */
          }
        case 34: break;
        case 22: 
          { return symbol(sym.PRIMARY);
          }
        case 35: break;
        case 13: 
          { return symbol(sym.REAL_TYPE);
          }
        case 36: break;
        case 7: 
          { return symbol(sym.APOSTROPHE);
          }
        case 37: break;
        case 21: 
          { return symbol(sym.INTEGER_TYPE);
          }
        case 38: break;
        case 17: 
          { return symbol(sym.TABLE);
          }
        case 39: break;
        case 10: 
          { return symbol(sym.IF);
          }
        case 40: break;
        case 19: 
          { return symbol(sym.EXISTS);
          }
        case 41: break;
        case 1: 
          { /* throw new Error("Illegal character <"+ yytext()+">");*/
		    error("Illegal character <"+ yytext()+">");
          }
        case 42: break;
        case 20: 
          { return symbol(sym.SERIAL);
          }
        case 43: break;
        case 8: 
          { return symbol(sym.COMMA);
          }
        case 44: break;
        case 12: 
          { return symbol(sym.KEY);
          }
        case 45: break;
        case 2: 
          { /* Ignorujemy biale znaki */
          }
        case 46: break;
        case 16: 
          { return symbol(sym.DATE);
          }
        case 47: break;
        case 5: 
          { return symbol(sym.LBRACKET);
          }
        case 48: break;
        case 24: 
          { return symbol(sym.VARCHAR);
          }
        case 49: break;
        case 26: 
          { return symbol(sym.REFERENCES);
          }
        case 50: break;
        case 15: 
          { return symbol(sym.REAL);
          }
        case 51: break;
        case 9: 
          { /* Ignorujemy komentarze */
          }
        case 52: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
