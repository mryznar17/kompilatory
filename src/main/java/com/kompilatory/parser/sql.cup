package com.kompilatory.parser;

import java_cup.runtime.*;
import java.util.List;
import com.kompilatory.model.Tabela;
import java.util.LinkedList;

parser code {:
	Tabela tab = new Tabela();
	List<Tabela> tabele = new LinkedList<Tabela>();
	String nazwa;
	String typ;
	
	public Tabela getTabela()
	{
		return this.tab;
	}
	
	public List<Tabela> getTabele()
	{
		return this.tabele;
	}
:}

/* Terminals (tokens returned by the scanner). */
		
terminal    String 	ID;
terminal 	CREATE, TABLE, IF, NOT, EXISTS, PRIMARY, KEY, REFERENCES;
terminal 	INTEGER, REAL, VARCHAR, TEXT, TIMESTAMP, DATE, SERIAL, INTEGER_TYPE, REAL_TYPE;
terminal	LBRACKET, RBRACKET, APOSTROPHE, COMMA;


/* Non terminals */
non terminal            input,line;
non terminal 			new_table;
non terminal String		def;
non terminal			dec, mid, variable, var_type, type, key;
non terminal String		nowa_tabela;
non terminal			primary_key;
non terminal			atr;

/* Precedences */
precedence left key,variable;

/* The grammar rules */
//TODO : Przetestowac i dodawac tabele do linkedList i atrybuty do hashmapy
input 		::= 	input:a new_table 	{: RESULT=a; :}  	| new_table:a	{: RESULT=a; :}	;

new_table 	::=		def:a APOSTROPHE {: RESULT=a; :};

def			::=		CREATE TABLE IF NOT EXISTS ID:var dec	{:  RESULT = "test3000";
															System.out.println(var.toString()+"costam"); 
															 parser.tab.setNazwa(var.toString()); 
															parser.tabele.add(parser.tab);
															parser.tab=new Tabela();
															:}		|
					CREATE TABLE ID:var dec 				{: parser.tab=new Tabela(); parser.tab.setNazwa(var.toString()); :}	;
					
dec			::= 	LBRACKET mid RBRACKET;

mid			::=		mid variable	|	variable {:  :}	| 	key	{:  :} ;	

variable	::= 	ID:var	var_type COMMA		{: parser.nazwa=var.toString(); parser.tab.getAtrybuty().put(parser.nazwa,parser.typ); :}	|
					ID:var	var_type	{: parser.nazwa=var.toString(); parser.tab.getAtrybuty().put(parser.nazwa,parser.typ); :}	;
					

var_type	::=		INTEGER_TYPE key	{: parser.typ = "integer "+parser.typ; :} |	INTEGER_TYPE			{: parser.typ = "integer"; :}
				|	REAL_TYPE key	{: parser.typ = "real "+parser.typ; :}	|	REAL_TYPE				{:  parser.typ = "real"; :}
				|	VARCHAR LBRACKET INTEGER:var RBRACKET	key {: //parser.typ = "varchar("+var.toString()+") "+parser.typ; :} | VARCHAR  LBRACKET INTEGER:var RBRACKET	{: //parser.typ = "varchar("+var.toString()+")"; 
																																												parser.typ = "varchar("+var+")"; :}
				|	TEXT key		{: parser.typ = "text "+parser.typ; :}	| 	TEXT					{:  parser.typ = "text";  :}
				|	TIMESTAMP key	{: parser.typ = "timestamp "+parser.typ; :}	|	TIMESTAMP				{: parser.typ = "timestamp"; :}
				|	DATE key		{: parser.typ = "date "+parser.typ; :}	|	DATE					{: parser.typ = "date"; :}
				|	SERIAL key		{: parser.typ = "serial "+parser.typ; :}	|	SERIAL		{: parser.typ = "serial"; :}			
				;
				
key			::=		PRIMARY KEY		{: parser.typ = "primary key"; :}	|
					REFERENCES ID:var LBRACKET  ID:var2 RBRACKET	{: parser.typ = "references "+var.toString()+"("+var2.toString()+")";	:}	|
					PRIMARY KEY	REFERENCES ID:var LBRACKET  ID:var2 RBRACKET	{:	 parser.typ = "primary key references "+var.toString()+"("+var2.toString()+")";	:}	|
					PRIMARY KEY LBRACKET ID:var COMMA ID:var2 RBRACKET {: //TODO: zrobic i zwalidowac :}	;