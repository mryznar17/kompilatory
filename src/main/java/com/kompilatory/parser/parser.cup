package com.kompilatory.parser;

import java_cup.runtime.*;
import java.io.InputStream;

parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Tabela tab;
    InputStream inputstream;
    
    public Parser(Scanner s,InputStream inputstream){ 
    	this.s=s; 
    	this.inputstream=inputstream; 
    }
    
    public void setScanner(Scanner scanner)
	{
		this.scanner = scanner;
	}
	
	public Tabela getTabela()
	{
		return this.tab;
	}
	
	
    
:}

/* define how to connect to the scanner! */
init with {: //s.init(); :};
scan with {: return s.next_token(); :};


/* Terminals (tokens returned by the scanner). */
		
terminal    ID;
terminal	NEW_LINE;
terminal 	CREATE, TABLE, IF, NOT, EXISTS, PRIMARY, KEY, REFERENCES;
terminal 	INTEGER, REAL, VARCHAR, TEXT, TIMESTAMP, DATE, SERIAL;
terminal	LBRACKET, RBRACKET, APOSTROPHE, COMMA;


/* Non terminals */
non terminal            input;
/*non terminal Double	    expr;      // used to store evaluated subexpressions */

/* Precedences */
precedence left ID;
precedence left NEW_LINE;

/* The grammar rules */

input ::= ID	               {: System.out.println(5.0);:}
;
expr      ::= NEW_LINE     		   {: RESULT = 5.0;           :}
             ;