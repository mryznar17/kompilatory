
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 22 01:30:08 CEST 2015
//----------------------------------------------------

package com.kompilatory.parser;

import java_cup.runtime.*;
import java.util.List;
import com.kompilatory.model.Tabela;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 22 01:30:08 CEST 2015
  */
public class SqlCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SqlCup() {super();}

  /** Constructor which sets the default scanner. */
  public SqlCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SqlCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\004\004\000\002\005\011\000\002\005\006" +
    "\000\002\006\005\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\010\005\000\002\010\004\000\002" +
    "\011\004\000\002\011\003\000\002\011\005\000\002\011" +
    "\004\000\002\011\003\000\002\011\005\000\002\011\004" +
    "\000\002\011\003\000\002\011\005\000\002\011\007\000" +
    "\002\011\006\000\002\011\010\000\002\011\007\000\002" +
    "\011\006\000\002\011\010\000\002\011\010\000\002\011" +
    "\012\000\002\011\011\000\002\011\004\000\002\011\003" +
    "\000\002\011\005\000\002\011\004\000\002\011\003\000" +
    "\002\011\005\000\002\011\004\000\002\011\003\000\002" +
    "\011\005\000\002\011\004\000\002\011\003\000\002\011" +
    "\005\000\002\011\004\000\002\011\003\000\002\011\005" +
    "\000\002\013\004\000\002\013\007\000\002\013\011\000" +
    "\002\013\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\004\005\004\001\002\000\004\006\013\001" +
    "\002\000\006\002\012\005\004\001\002\000\006\002\uffff" +
    "\005\uffff\001\002\000\004\034\010\001\002\000\006\002" +
    "\ufffe\005\ufffe\001\002\000\006\002\001\005\001\001\002" +
    "\000\004\002\000\001\002\000\006\004\014\007\015\001" +
    "\002\000\004\032\021\001\002\000\004\010\016\001\002" +
    "\000\004\011\017\001\002\000\004\004\020\001\002\000" +
    "\004\032\021\001\002\000\010\004\023\012\024\014\030" +
    "\001\002\000\004\034\ufffd\001\002\000\030\017\056\020" +
    "\061\021\064\022\053\023\052\024\060\025\062\026\065" +
    "\027\055\030\054\031\057\001\002\000\004\013\037\001" +
    "\002\000\006\004\023\033\036\001\002\000\006\004\ufff9" +
    "\033\ufff9\001\002\000\006\004\ufff8\033\ufff8\001\002\000" +
    "\004\004\031\001\002\000\004\032\032\001\002\000\004" +
    "\004\033\001\002\000\004\033\034\001\002\000\010\004" +
    "\uffd3\033\uffd3\035\uffd3\001\002\000\006\004\ufffa\033\ufffa" +
    "\001\002\000\004\034\ufffb\001\002\000\014\004\uffd4\014" +
    "\040\032\041\033\uffd4\035\uffd4\001\002\000\004\004\046" +
    "\001\002\000\004\004\042\001\002\000\004\035\043\001" +
    "\002\000\004\004\044\001\002\000\004\033\045\001\002" +
    "\000\010\004\uffd1\033\uffd1\035\uffd1\001\002\000\004\032" +
    "\047\001\002\000\004\004\050\001\002\000\004\033\051" +
    "\001\002\000\010\004\uffd2\033\uffd2\035\uffd2\001\002\000" +
    "\016\004\uffd6\010\140\012\024\014\030\033\uffd6\035\uffd6" +
    "\001\002\000\016\004\uffd9\010\135\012\024\014\030\033" +
    "\uffd9\035\uffd9\001\002\000\004\032\125\001\002\000\016" +
    "\004\uffdf\010\122\012\024\014\030\033\uffdf\035\uffdf\001" +
    "\002\000\004\032\114\001\002\000\016\004\uffee\010\111" +
    "\012\024\014\030\033\uffee\035\uffee\001\002\000\016\004" +
    "\ufff4\010\106\012\024\014\030\033\ufff4\035\ufff4\001\002" +
    "\000\016\004\uffe2\010\103\012\024\014\030\033\uffe2\035" +
    "\uffe2\001\002\000\016\004\ufff1\010\100\012\024\014\030" +
    "\033\ufff1\035\ufff1\001\002\000\010\004\ufff6\033\ufff6\035" +
    "\077\001\002\000\016\004\uffdc\010\074\012\024\014\030" +
    "\033\uffdc\035\uffdc\001\002\000\004\032\066\001\002\000" +
    "\004\015\067\001\002\000\004\033\070\001\002\000\016" +
    "\004\uffeb\010\071\012\024\014\030\033\uffeb\035\uffeb\001" +
    "\002\000\004\036\073\001\002\000\010\004\uffec\033\uffec" +
    "\035\uffec\001\002\000\010\004\uffea\033\uffea\035\uffea\001" +
    "\002\000\004\036\076\001\002\000\010\004\uffdd\033\uffdd" +
    "\035\uffdd\001\002\000\010\004\uffdb\033\uffdb\035\uffdb\001" +
    "\002\000\006\004\ufff7\033\ufff7\001\002\000\004\036\102" +
    "\001\002\000\010\004\ufff2\033\ufff2\035\ufff2\001\002\000" +
    "\010\004\ufff0\033\ufff0\035\ufff0\001\002\000\004\036\105" +
    "\001\002\000\010\004\uffe3\033\uffe3\035\uffe3\001\002\000" +
    "\010\004\uffe1\033\uffe1\035\uffe1\001\002\000\004\036\110" +
    "\001\002\000\010\004\ufff5\033\ufff5\035\ufff5\001\002\000" +
    "\010\004\ufff3\033\ufff3\035\ufff3\001\002\000\004\036\113" +
    "\001\002\000\010\004\uffef\033\uffef\035\uffef\001\002\000" +
    "\010\004\uffed\033\uffed\035\uffed\001\002\000\004\015\115" +
    "\001\002\000\004\033\116\001\002\000\016\004\uffe8\010" +
    "\117\012\024\014\030\033\uffe8\035\uffe8\001\002\000\004" +
    "\036\121\001\002\000\010\004\uffe9\033\uffe9\035\uffe9\001" +
    "\002\000\010\004\uffe7\033\uffe7\035\uffe7\001\002\000\004" +
    "\036\124\001\002\000\010\004\uffe0\033\uffe0\035\uffe0\001" +
    "\002\000\010\004\uffde\033\uffde\035\uffde\001\002\000\004" +
    "\015\126\001\002\000\004\035\127\001\002\000\004\015" +
    "\130\001\002\000\004\033\131\001\002\000\016\004\uffe6" +
    "\010\132\012\024\014\030\033\uffe6\035\uffe6\001\002\000" +
    "\004\036\134\001\002\000\010\004\uffe4\033\uffe4\035\uffe4" +
    "\001\002\000\010\004\uffe5\033\uffe5\035\uffe5\001\002\000" +
    "\004\036\137\001\002\000\010\004\uffda\033\uffda\035\uffda" +
    "\001\002\000\010\004\uffd8\033\uffd8\035\uffd8\001\002\000" +
    "\004\036\142\001\002\000\010\004\uffd7\033\uffd7\035\uffd7" +
    "\001\002\000\010\004\uffd5\033\uffd5\035\uffd5\001\002\000" +
    "\004\034\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\010\002\004\004\005\005\006\001\001\000" +
    "\002\001\001\000\006\004\010\005\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\021\001\001\000\010\007\024\010\025" +
    "\013\026\001\001\000\002\001\001\000\004\011\062\001" +
    "\001\000\002\001\001\000\004\010\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\140\001\001\000\004\013\135\001\001\000" +
    "\002\001\001\000\004\013\122\001\001\000\002\001\001" +
    "\000\004\013\111\001\001\000\004\013\106\001\001\000" +
    "\004\013\103\001\001\000\004\013\100\001\001\000\002" +
    "\001\001\000\004\013\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SqlCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SqlCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SqlCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	Tabela tab = new Tabela();
	List<Tabela> tabele = new LinkedList<Tabela>();
	String nazwa;
	String typ;
	
	public Tabela getTabela()
	{
		return this.tab;
	}
	
	public List<Tabela> getTabele()
	{
		return this.tabele;
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SqlCup$actions {
  private final SqlCup parser;

  /** Constructor */
  CUP$SqlCup$actions(SqlCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SqlCup$do_action(
    int                        CUP$SqlCup$act_num,
    java_cup.runtime.lr_parser CUP$SqlCup$parser,
    java.util.Stack            CUP$SqlCup$stack,
    int                        CUP$SqlCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SqlCup$result;

      /* select the action based on the action number */
      switch (CUP$SqlCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // key ::= PRIMARY KEY LBRACKET ID COMMA ID RBRACKET 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).value;
		 //TODO: zrobic i zwalidowac 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("key",9, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-6)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // key ::= PRIMARY KEY REFERENCES ID LBRACKET ID RBRACKET 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).value;
		 parser.typ = "primary key references "+var.toString()+"("+var2.toString()+")"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("key",9, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-6)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // key ::= REFERENCES ID LBRACKET ID RBRACKET 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).right;
		String var2 = (String)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).value;
		 parser.typ = "references "+var.toString()+"("+var2.toString()+")"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("key",9, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-4)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // key ::= PRIMARY KEY 
            {
              Object RESULT =null;
		 parser.typ = "primary key"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("key",9, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var_type ::= SERIAL NOT NULL 
            {
              Object RESULT =null;
		 parser.typ = "serial"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var_type ::= SERIAL 
            {
              Object RESULT =null;
		 parser.typ = "serial"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var_type ::= SERIAL key 
            {
              Object RESULT =null;
		 parser.typ = "serial "+parser.typ; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var_type ::= DATE NOT NULL 
            {
              Object RESULT =null;
		 parser.typ = "date"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // var_type ::= DATE 
            {
              Object RESULT =null;
		 parser.typ = "date"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // var_type ::= DATE key 
            {
              Object RESULT =null;
		 parser.typ = "date "+parser.typ; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var_type ::= TIMESTAMP NOT NULL 
            {
              Object RESULT =null;
		 parser.typ = "timestamp"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var_type ::= TIMESTAMP 
            {
              Object RESULT =null;
		 parser.typ = "timestamp"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var_type ::= TIMESTAMP key 
            {
              Object RESULT =null;
		 parser.typ = "timestamp "+parser.typ; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_type ::= BOOLEAN NOT NULL 
            {
              Object RESULT =null;
		 parser.typ = "boolean"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_type ::= BOOLEAN 
            {
              Object RESULT =null;
		 parser.typ = "boolean"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // var_type ::= BOOLEAN key 
            {
              Object RESULT =null;
		 parser.typ = "boolean "+parser.typ; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var_type ::= TEXT NOT NULL 
            {
              Object RESULT =null;
		  parser.typ = "text";  
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_type ::= TEXT 
            {
              Object RESULT =null;
		  parser.typ = "text";  
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_type ::= TEXT key 
            {
              Object RESULT =null;
		 parser.typ = "text "+parser.typ; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_type ::= NUMERIC LBRACKET INTEGER COMMA INTEGER RBRACKET key 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-4)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-4)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)).value;
		 parser.typ = "numeric("+var+","+var2+")"+parser.typ; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-6)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_type ::= NUMERIC LBRACKET INTEGER COMMA INTEGER RBRACKET NOT NULL 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-5)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-5)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).value;
		 parser.typ = "numeric("+var+","+var2+")"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-7)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_type ::= NUMERIC LBRACKET INTEGER COMMA INTEGER RBRACKET 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).value;
		 parser.typ = "numeric("+var+","+var2+")"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-5)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_type ::= VARCHAR LBRACKET INTEGER RBRACKET NOT NULL 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).value;
		 parser.typ = "varchar("+var+")"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-5)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_type ::= VARCHAR LBRACKET INTEGER RBRACKET 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).value;
		 parser.typ = "varchar("+var+")"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_type ::= VARCHAR LBRACKET INTEGER RBRACKET key 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)).value;
		 parser.typ = "varchar("+var+") "+parser.typ; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-4)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_type ::= CHAR LBRACKET INTEGER RBRACKET NOT NULL 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)).value;
		 parser.typ = "char("+var+")"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-5)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_type ::= CHAR LBRACKET INTEGER RBRACKET 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).value;
		 parser.typ = "char("+var+")"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_type ::= CHAR LBRACKET INTEGER RBRACKET key 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)).value;
		 parser.typ = "char("+var+") "+parser.typ; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-4)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_type ::= SMALLINT NOT NULL 
            {
              Object RESULT =null;
		 parser.typ = "smallint"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_type ::= SMALLINT 
            {
              Object RESULT =null;
		 parser.typ = "smallint"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_type ::= SMALLINT key 
            {
              Object RESULT =null;
		 parser.typ = "smallint "+parser.typ; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_type ::= REAL_TYPE NOT NULL 
            {
              Object RESULT =null;
		  parser.typ = "real"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_type ::= REAL_TYPE 
            {
              Object RESULT =null;
		  parser.typ = "real"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_type ::= REAL_TYPE key 
            {
              Object RESULT =null;
		 parser.typ = "real "+parser.typ; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_type ::= INTEGER_TYPE NOT NULL 
            {
              Object RESULT =null;
		 parser.typ = "integer"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_type ::= INTEGER_TYPE 
            {
              Object RESULT =null;
		 parser.typ = "integer"; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_type ::= INTEGER_TYPE key 
            {
              Object RESULT =null;
		 parser.typ = "integer "+parser.typ; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("var_type",7, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable ::= ID var_type 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).value;
		 	parser.nazwa=var.toString(); 
						parser.tab.getAtrybuty().put(parser.nazwa,parser.typ); 
					
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable ::= ID var_type COMMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)).value;
		 	parser.nazwa=var.toString(); 
						parser.tab.getAtrybuty().put(parser.nazwa,parser.typ); 
					
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("variable",6, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // mid ::= key 
            {
              Object RESULT =null;
		  
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("mid",5, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // mid ::= variable 
            {
              Object RESULT =null;
		  
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("mid",5, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // mid ::= mid variable 
            {
              Object RESULT =null;

              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("mid",5, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec ::= LBRACKET mid RBRACKET 
            {
              Object RESULT =null;

              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("dec",4, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-2)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // def ::= CREATE TABLE ID dec 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).value;
		  parser.tab.setNazwa(var.toString());
						parser.tab.szukajPowiazan(); 
						parser.tabele.add(parser.tab);
						parser.tab=new Tabela();
					
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("def",3, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-3)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // def ::= CREATE TABLE IF NOT EXISTS ID dec 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).value;
		  RESULT = "test3000"; 
						parser.tab.setNazwa(var.toString()); 
						parser.tab.szukajPowiazan(); 
						parser.tabele.add(parser.tab);
						parser.tab=new Tabela();
					
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("def",3, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-6)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // new_table ::= def APOSTROPHE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).value;
		 RESULT=a; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("new_table",2, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // input ::= new_table 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SqlCup$stack.peek()).value;
		 RESULT=a; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("input",0, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= input EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).value;
		RESULT = start_val;
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SqlCup$parser.done_parsing();
          return CUP$SqlCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // input ::= input new_table 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)).value;
		 RESULT=a; 
              CUP$SqlCup$result = parser.getSymbolFactory().newSymbol("input",0, ((java_cup.runtime.Symbol)CUP$SqlCup$stack.elementAt(CUP$SqlCup$top-1)), ((java_cup.runtime.Symbol)CUP$SqlCup$stack.peek()), RESULT);
            }
          return CUP$SqlCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

